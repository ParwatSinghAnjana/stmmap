/*
 
 README
 
 Copyright 2009 Shel Kaphan
 
 This file is part of stmmap.
 
 stmmap is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 stmmap is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.
 
 You should have received a copy of the GNU Lesser General Public License
 along with stmmap.  If not, see <http://www.gnu.org/licenses/>.
 
 */


The purpose of this package is to provide something akin to "Software
Transactional Memory" functionality in C and C++, without requiring much extra
complexity for the programmer.	

It is built on top of file-mapping -- in particular Unix's mmap() system call.
One or more shared memory areas are opened by each process that uses this package.
When no transaction is in progress, each shared area is visible to any processes
that access that segment of mapped memory.

When a transaction is in progress, the shared area is access-protected, and all
accesses are trapped.  A signal handler keeps track of the accessed pages.
Upon first access in a transaction, each accessed page is remapped "private" so that
any modifications are not visible to any other process.  If, on first access to a page
within a transaction, it can be determined that another process has modified that page,
the transaction is aborted.  When a transaction is committed, there is an
attempt to establish ownership of all modified pages and then re-map those private pages
as shared.

This package uses "optimistic locking" in that the modified pages
are only locked at the end of the transaction, during the commit process.  At commit
time, there is another check to see if any other processes have modified the pages that
have been accessed during the transaction, by means of a transaction ID associated
with each page.  If they have, the transaction is aborted and all changes discarded.
Though this system works using mapped files, no I/O needs to occur normally --
the writes just affect the mapped file's memory buffers.

This mechanism provides read consistency in that if a transaction A succeeds, it
is guaranteed that no other transaction B will have modified the pages accessed by
transaction A.  However, there is no guarantee the transaction will
succeed. Transactions that are automatically aborted are also automatically retried,
with a backoff mechanism, until they succeed.

Accesses to shared segments not during transactions are "real time" and there is no
guarantee of consistency. The access control on shared segments between (not during)
transactions can be specified for each shared segment.

Transactions are composable -- that is, they can be nested.  This is so that
complex transactions can be built up out of simpler ones.

Processes can have a number of shared memory areas, limited by the number of file
descriptors and virtual memory available.

This package works at the process level, not at the thread level.  If you are
looking for a multi-threaded approach, this is not for you.  However, it does work
using arbitrarily large shared memory areas between processes.   Each
process can map a shared segment to a known virtual location, so arbitrary
data structures can exist in the shared area.  However, these data struct should
not refer outside the shared area to objects that only exist in the private parts
of a process's address space!

It is arguable that it is better for threads of execution (processes, in this case)
to share only the data structure they *intend* to share, not everything in the
address space, that they only accidentally share.  That is the philosophy of this
package.  To use the technical approach followed in this package, this is also the
only possibility, at least so long as threads do not have their own memory maps!

Another limitation of this package is that it operates on the OS page level.
That is, only one process can write to a page during a transaction, and any other
process's transaction that accesses the same page will have to be aborted and
retried. This may not be as bad as it sounds if you code your transactions to be
relatively short.  The arbitration between processes seeking to own a page during
a transaction is on a first-come first-served basis.  Since pages are always
locked in order of virtual address, there can be no deadlock.  As soon as a
transaction tries to obtain a page that has been modified by another process's
transaction, it aborts.

Another restriction is that this package will only work on systems where the
contents of shared, mapped files are immediately visible to all processes that
have them mapped shared.  This could possibly fail on some systems without
sufficient cache coherency, for example.  This package does *not* depend on
private mappings being kept up to date with the current contents of a file.
It does depend on private pages not being visible to other processes, and it
uses "copy-on-write" semantics of private mapping to ensure that private pages
are private and will not be arbitrarily overwritten with data from another
process.

Warning: since transactions will be retried until they succeed, any variables
outside the explicitly shared memory segment(s) that are referenced within a
transaction must be handled with care.  In particular, you should not access
anything that you later modify in the same transaction.  If the transaction is
retried, the earlier reference will pick up the value set in an earlier try. You
can set and then use a variable in the same transaction, but you can't use a
variable and then set it to a new value and expect that to work right if retries
are necessary.  It is helpful to think of the code in a transaction as being the
body of a loop, that you don't know how many times is going to be executed.
Only information in the shared segments is managed transactionally.

To use this package you only need to link in the compiled versions of stm.c and
atomic-compat.c.  All visible APIs are exposed through stm.h.

There is also a memory allocator for your shared segments.  For this, you need
to include the compiled versions of AVLtree.c, stmalloc.c, and segalloc.c.
The visible API is in stmalloc.h.

Shel Kaphan, Oct. 17, 2009

